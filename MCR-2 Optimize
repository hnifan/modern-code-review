#include <iostream>
#include <limits>

using namespace std;

/*
 * Check whether there is a winner on the board.
 * Returns true if any row, column or diagonal is filled
 * with the same non-space character ('X' or 'O').
 */
bool isWin(const char board[3][3]) {
    // check rows
    for (int r = 0; r < 3; ++r) {
        if (board[r][0] != ' ' && board[r][0] == board[r][1] && board[r][1] == board[r][2])
            return true;
    }
    // check columns
    for (int c = 0; c < 3; ++c) {
        if (board[0][c] != ' ' && board[0][c] == board[1][c] && board[1][c] == board[2][c])
            return true;
    }
    // check diagonals
    if (board[0][0] != ' ' && board[0][0] == board[1][1] && board[1][1] == board[2][2])
        return true;
    if (board[0][2] != ' ' && board[0][2] == board[1][1] && board[1][1] == board[2][0])
        return true;

    return false;
}

/*
 * Print the board to console in a human-friendly format.
 */
void printBoard(const char board[3][3]) {
    cout << endl;
    for (int r = 0; r < 3; ++r) {
        cout << " ";
        for (int c = 0; c < 3; ++c) {
            cout << board[r][c];
            if (c < 2) cout << " | ";
        }
        cout << endl;
        if (r < 2) cout << "---+---+---" << endl;
    }
    cout << endl;
}

int main() {
    // initialize an empty 3x3 board filled with spaces
    char board[3][3];
    for (int r = 0; r < 3; ++r)
        for (int c = 0; c < 3; ++c)
            board[r][c] = ' ';

    const char PLAYER1 = 'X';
    const char PLAYER2 = 'O';
    bool player1Turn = true; // Player 1 starts

    cout << "Tic-Tac-Toe\n";
    cout << "X = Player 1\nO = Player 2\n";
    printBoard(board);

    int moves = 0;
    bool winner = false;

    // Loop until 9 moves or someone wins
    while (moves < 9 && !winner) {
        int inputRow, inputCol;
        char current = player1Turn ? PLAYER1 : PLAYER2;

        cout << (player1Turn ? "Player 1 (X)" : "Player 2 (O)")
             << ", enter row and column (each 1..3), separated by space: ";

        // read two integers
        if (!(cin >> inputRow >> inputCol)) {
            // invalid (non-integer) input: clear and ask again
            cout << "Invalid input. Please enter two integers between 1 and 3.\n";
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            continue;
        }

        // validate range 1..3
        if (inputRow < 1 || inputRow > 3 || inputCol < 1 || inputCol > 3) {
            cout << "Out of range. Both row and column must be between 1 and 3.\n";
            continue;
        }

        int r = inputRow - 1; // convert to 0-based index
        int c = inputCol - 1;

        // check if cell already occupied
        if (board[r][c] != ' ') {
            cout << "That cell is already occupied. Choose another cell.\n";
            continue;
        }

        // place the mark
        board[r][c] = current;
        moves++;

        // show the board after the move
        printBoard(board);

        // check for win
        if (isWin(board)) {
            cout << (player1Turn ? "Player 1 (X) wins!" : "Player 2 (O) wins!") << endl;
            winner = true;
            break;
        }

        // switch turns
        player1Turn = !player1Turn;
    }

    if (!winner) {
        cout << "It's a tie!" << endl;
    }

    cout << "Final board:\n";
    printBoard(board);

    return 0;
}
